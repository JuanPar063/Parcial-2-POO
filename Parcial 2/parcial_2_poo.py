# -*- coding: utf-8 -*-
"""Parcial 2 - POO

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15zr8HLqUGIUMST8kPD08PcPm9v15s--c
"""

import unittest

# Creación de las clases necesarias
class Persona:
    def __init__(self, nombre, ID, rol):
        self.nombre = nombre
        self.ID = ID
        self.rol = rol

class Camión:
    def __init__(self, modelo, codigo_camion, persona, asistentes):
        self.conductor = persona
        self.asistentes = asistentes
        self.modelo = modelo
        self.codigo_camion = codigo_camion

# En la ruta se tienen dos listas con las diferentes coordenadas de latitud y longitud de las rutas ademas en esta misma clase se obtiene el punto geografico
class Ruta:
    def __init__(self):
        self.latitud = []
        self.longitud = []
        self.PuntoGeografico = []

    def agregarListaLatitud(self, latitud):
        self.latitud.append(latitud)

    def agregarListaLongitud(self, longitud):
        self.longitud.append(longitud)

    def determinarPunto(self, longitud, latitud):
        punto = [latitud, longitud] 
        self.PuntoGeografico.append(punto)

# Turno lo recibe todo, en esta clase se calcula el tiempo en turno
class Turno:
    def __init__(self, ruta, camion, h_inicio, h_final, fecha, t_vidrio, t_papel, t_plastico, t_metal, t_residuosorg):
        self.ruta = ruta
        self.camion = camion
        self.h_inicio = h_inicio
        self.h_final = h_final
        self.fecha = fecha
        self.tiempo = 0
        self.t_vidrio = t_vidrio
        self.t_papel = t_papel
        self.t_plastico = t_plastico
        self.t_metal = t_metal
        self.t_residuosorg = t_residuosorg

    def Calcular_tiemporeco(self):
        self.tiempo = self.h_final - self.h_inicio

# El centro de acopio se encarga de recibir la basura que llega, alli se calcula el total de basura recogida en un dia
# Ademas lleva un registro de los turnos que se han realizado y alamcena la información con el total de basura que se recoge
class Centro_de_acopio:
    def __init__(self):
        self.listaTurnos = []
        self.listaBasura = []
        self.listaBasuraTotal = []

    def agregarBasura(self, vidrio, papel, plastico, metal, residuosorg):
        self.listaBasura.append((vidrio, papel, plastico, metal, residuosorg))

    def agregarTurnos(self, turno):
        self.listaTurnos.append(turno)

    def agregarBasuraTotal(self, tvidrio, tpapel, tplastico, tmetal, tresiduosorg):
        self.listaBasuraTotal.append((tvidrio, tpapel, tplastico, tmetal, tresiduosorg))

    def CalcularVidrioTotal(self):
        totalvidrio = 0
        for row in self.listaBasura:
            totalvidrio += row[0]
        return totalvidrio

    def CalcularPapelTotal(self):
        totalpapel = 0
        for row in self.listaBasura:
            totalpapel += row[1]
        return totalpapel

    def CalcularPlasticoTotal(self):
        totalplastico = 0
        for row in self.listaBasura:
            totalplastico += row[2]
        return totalplastico

    def CalcularMetalTotal(self):
        totalmetal = 0
        for row in self.listaBasura:
            totalmetal += row[3]
        return totalmetal

    def CalcularOrganicoTotal(self):
        totalorganico = 0
        for row in self.listaBasura:
            totalorganico += row[4]
        return totalorganico

 # Clases Pruebas unitarias

# Esta es la clase que se encarga de llevar a cabo la prueba unitaria del metodo de calcular el tiempo de recorrido de una ruta
class TestTurno(unittest.TestCase):
    def test_calcular_tiemporeco(self):
        ruta = Ruta()
        camion = Camión("Dodge", "ABC123", persona1, asistentes)
        turno = Turno(ruta, camion, 8, 12, "2023-01-01", 10, 5, 3, 2, 1)
        turno.Calcular_tiemporeco()
        self.assertEqual(turno.tiempo, 4)

# Esta es la clase que realiza la prueba unitaria del metodo de calcular el total de vidrio que se recibe en dos turnos dentro del centro de acopio
class TestCentroDeAcopio(unittest.TestCase):
    def test_CalcularVidrioTotal(self):
        centro_acopio = Centro_de_acopio()
        centro_acopio.agregarBasura(10, 20, 30, 40, 50)
        centro_acopio.agregarBasura(15, 25, 35, 45, 55)
        total_vidrio = centro_acopio.CalcularVidrioTotal()

        # REsultados que deberia arrogar
        self.assertEqual(total_vidrio, 25)

# Instancias

# Personas, tanto conductores como asistentes
persona1 = Persona("Juan", "1234", "conductor")
persona2 = Persona("Ana", "5678", "asistente")
persona3 = Persona("Germin", "5345", "asistente")

asistentes = [persona3, persona2]

# Camiones, cada uno con un conductor y un asistente
camion1 = Camión("HINO", "SDF234", persona1, asistentes)
camion2 = Camión("Dodge", "DFG443", persona1, asistentes)
camion3 = Camión("Mercedes-Benz", "SDV684", persona1, asistentes)
camion4 = Camión("Chevrolet", "DSG563", persona1, asistentes)
camion5 = Camión("Marcopolo", "ASV324", persona1, asistentes)

# Ruta a seguir para los diferentes camiones
ruta = Ruta()
ruta.agregarListaLatitud("10° 50' 40'")
ruta.agregarListaLongitud("12° 40' 45'")
ruta.determinarPunto(ruta.longitud, ruta.latitud)

# Asignacion de los turnos, misma ruta pero en diferentes fechas y horas
turno1 = Turno(ruta, camion1, 8, 18, "2023-01-01", 10, 5, 3, 2, 1)
turno2 = Turno(ruta, camion2, 12, 24, "2023-01-02", 8, 4, 2, 1, 0)
turno3 = Turno(ruta, camion3, 2, 10, "2023-01-03", 7, 3, 2, 1, 0)
turno4 = Turno(ruta, camion4, 6, 16, "2023-01-04", 9, 5, 2, 2, 1)
turno5 = Turno(ruta, camion5, 15, 1, "2023-01-05", 11, 6, 3, 2, 1)

centro_acopio1 = Centro_de_acopio()  # Crear una instancia de la clase Centro_de_acopio

# Se le añaden los residuos recogidos en los diferentes turnos 
centro_acopio1.agregarBasura(turno1.t_vidrio, turno1.t_papel, turno1.t_plastico, turno1.t_metal, turno1.t_residuosorg)
centro_acopio1.agregarBasura(turno2.t_vidrio, turno2.t_papel, turno2.t_plastico, turno2.t_metal, turno2.t_residuosorg)
centro_acopio1.agregarBasura(turno3.t_vidrio, turno3.t_papel, turno3.t_plastico, turno3.t_metal, turno3.t_residuosorg)
centro_acopio1.agregarBasura(turno4.t_vidrio, turno4.t_papel, turno4.t_plastico, turno4.t_metal, turno4.t_residuosorg)
centro_acopio1.agregarBasura(turno5.t_vidrio, turno5.t_papel, turno5.t_plastico, turno5.t_metal, turno5.t_residuosorg)

# Se Añaden a la lista de turnos los turnos hechos, por medio del metodo agregarturnos
centro_acopio1.agregarTurnos(turno1)
centro_acopio1.agregarTurnos(turno2)
centro_acopio1.agregarTurnos(turno3)
centro_acopio1.agregarTurnos(turno4)
centro_acopio1.agregarTurnos(turno5)

# Se calcular el vidrio total recogido en los 5 turnos por medio del metodo CalcularVidrioTotal
print("Cantidad de vidrio en el centro de acopio después de 5 turnos:", centro_acopio1.CalcularVidrioTotal())

# Prueba Unitaria para los metodos CalcularVidrioTotal y Calcular_tiemporeco
unittest.main(argv=[''], verbosity=2, exit=False)